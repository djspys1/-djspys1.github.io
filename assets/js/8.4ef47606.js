(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{329:function(n,r,a){"use strict";a.r(r);var t=a(33),e=Object(t.a)({},(function(){var n=this,r=n.$createElement,a=n._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"php"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php"}},[n._v("#")]),n._v(" php")]),n._v(" "),a("h2",{attrs:{id:"php四种基本算法（冒泡、选择、快速、插入）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php四种基本算法（冒泡、选择、快速、插入）"}},[n._v("#")]),n._v(" php四种基本算法（冒泡、选择、快速、插入）")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("<?php\n/**\n * Created by PhpStorm.\n * User: djspy\n * Date: 2017/8/1\n * Time: 14:42\n */\n\n/**\n * @param array $arr\n *\n * @return array\n * 冒泡排序\n * 两两比较，较大值放后面\n * [4,3,2,1]->[3,4,2,1]->[3,2,4,1]->[3,2,1,4]\n * [2,3,1,4]->[2,1,3,4]->[1,2,3,4]\n */\nfunction bubbleSort(array $arr)\n{\n    $count = count($arr);\n    for ($i = 1; $i < $count; $i++) {\n        for ($j = 0; $j < $count - $i; $j++) {\n            if ($arr[$j] > $arr[$j + 1]) {\n                $tmp = $arr[$j + 1];\n                $arr[$j + 1] = $arr[$j];\n                $arr[$j] = $tmp;\n            }\n            var_dump($arr);\n        }\n    }\n    return $arr;\n}\n\n/**\n * @param array $arr\n *\n * @return array\n * 快速排序\n * 使用递归的思想\n * 将第一个值作为中间值，循环比较，比其小的值放入left数组，反之放入right数组，然后进行递归\n * array_merge合并数组\n * 注： 合并时加入中间值\n */\nfunction quickSort(array $arr)\n{\n    $count = count($arr);\n    if ($count <= 1) {\n        return $arr;\n    }\n\n    $middle = $arr[0];\n    $left = [];\n    $right = [];\n    for ($i = 1; $i < $count; $i++) {\n        if ($middle < $arr[$i]) {\n            $right[] = $arr[$i];\n        } else {\n            $left[] = $arr[$i];\n        }\n    }\n\n    $left = quickSort($left);\n    $right = quickSort($right);\n\n    return array_merge($left, [$middle], $right);\n}\n\n/**\n * @param array $arr\n *\n * @return array\n * 选择排序\n * 从待排序的数组中选出最小值，放在起始位置\n * [4,3,2,1]->[1,4,3,2]->[1,2,4,3]->[1,2,3,4]\n */\nfunction selectSort(array $arr) {\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $min = $i;\n        for ($j = $i; $j < $count; $j++) {\n            if ($arr[$min] > $arr[$j]) {\n                $min = $j;\n            }\n        }\n        if ($min != $i) {\n            list($arr[$min], $arr[$i]) = [$arr[$i], $arr[$min]];\n        }\n    }\n    return $arr;\n}\n\n/**\n * @param array $arr\n *\n * @return array\n * 插入排序\n * 将待比较的值插入到合适的位置\n * [4,1,3,2]->[1,4,3,2]->[1,3,4,2]->[1,2,3,4]\n */\nfunction insertSort(array $arr) {\n    $count = count($arr);\n    for ($i = 1; $i < $count; $i++) {\n        $tmp = $arr[$i];\n        for ($j = $i - 1; $j >= 0; $j --) {\n            if ($tmp < $arr[$j]) {\n                $arr[$j+1] = $arr[$j];\n                $arr[$j] = $tmp;\n            }\n        }\n    }\n    return $arr;\n}\n$a = [4, 1, 3, 2];\n\nvar_dump(array_unique(bubbleSort($a)));\nvar_dump(array_unique(quickSort($a)));\nvar_dump(array_unique(selectSort($a)));\nvar_dump(array_unique(insertSort($a)));\n// 直接使用自带的方法\nsort($a);\nvar_dump($a);\nasort($a);\nvar_dump($a);\n")])])]),a("h2",{attrs:{id:"php策略模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php策略模式"}},[n._v("#")]),n._v(" php策略模式")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<?php\nuse Symfony\\Component\\DependencyInjection\\Reference;\n\n/**\n * Class Preferences\n * 单例模式\n * 具体实现\n * 1.私有的构造函数\n * 2.含有一个该类的静态私有对象\n * 3.提供一个静态的公有函数用于创建或获取它本身的私有对象\n * 4.一个私有的clone方法防止克隆\n */\nclass Preferences {\n    private $props = [];\n    private static $instance;\n\n    private function __construct() {}\n\n    public static function getInstance() {\n        if (empty(self::$instance)) {\n            self::$instance = new Preferences();\n        }\n        return self::$instance;\n    }\n\n    public function setProperty($key, $val)\n    {\n        $this->props[$key] = $val;\n    }\n\n    public function getProperty($key)\n    {\n        echo $this->props[$key];\n    }\n\n    private function __clone()\n    {\n        \n    }\n}\n\n$db = Preferences::getInstance();\n$db->setProperty("name", \'xx\');\n$db->getProperty("name");\n\nunset($db);\n\n$db2 = Preferences::getInstance();\n$db2->getProperty("name");\n')])])])])}),[],!1,null,null,null);r.default=e.exports}}]);